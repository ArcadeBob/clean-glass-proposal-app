generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // Optional for OAuth users
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
  proposals Proposal[] // User can create multiple proposals

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model GeneralContractor {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  company     String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  proposals Proposal[] // GC can have multiple proposals

  @@map("general_contractors")
}

model Proposal {
  id                    String           @id @default(cuid())
  title                 String
  description           String?
  status                ProposalStatus   @default(DRAFT)
  totalAmount           Decimal          @db.Decimal(10, 2) @default(0)
  overheadPercentage    Decimal          @db.Decimal(5, 2) @default(15.00)
  profitMargin          Decimal          @db.Decimal(5, 2) @default(20.00)
  riskScore             Int?             @default(0)
  winProbability        Decimal?         @db.Decimal(5, 2)
  
  // Project details
  projectName           String?
  projectAddress        String?
  projectType           ProjectType?
  squareFootage         Decimal?         @db.Decimal(10, 2)
  
  // Dates
  proposalDate          DateTime         @default(now())
  validUntil            DateTime?
  estimatedStartDate    DateTime?
  estimatedEndDate      DateTime?
  
  // Relationships
  userId                String           @map("user_id")
  generalContractorId   String?          @map("general_contractor_id")
  
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  generalContractor     GeneralContractor? @relation(fields: [generalContractorId], references: [id], onDelete: SetNull)
  items                 ProposalItem[]
  riskAssessment        RiskAssessment?
  
  // Metadata
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt @map("updated_at")
  version               Int              @default(1)
  
  @@map("proposals")
}

model ProposalItem {
  id              String        @id @default(cuid())
  name            String
  description     String?
  quantity        Decimal       @db.Decimal(10, 2)
  unit            String        @default("SF") // Square Feet, Linear Feet, etc.
  unitCost        Decimal       @db.Decimal(10, 2)
  totalCost       Decimal       @db.Decimal(10, 2)
  category        ItemCategory  @default(GLASS)
  
  // Relationships
  proposalId      String        @map("proposal_id")
  proposal        Proposal      @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  @@map("proposal_items")
}

// Risk Assessment Models
model RiskCategory {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  weight      Decimal     @db.Decimal(5, 2) @default(0) // Category weight in overall risk calculation
  isActive    Boolean     @default(true)
  sortOrder   Int         @default(0)
  
  // Relationships
  riskFactors RiskFactor[]
  
  // Metadata
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  @@map("risk_categories")
}

model RiskFactor {
  id          String      @id @default(cuid())
  name        String
  description String?
  categoryId  String      @map("category_id")
  weight      Decimal     @db.Decimal(5, 2) @default(0) // Factor weight within category
  scoringType ScoringType @default(LINEAR)
  dataType    DataType    @default(NUMERIC)
  minValue    Decimal?    @db.Decimal(10, 4)
  maxValue    Decimal?    @db.Decimal(10, 4)
  defaultValue Decimal?   @db.Decimal(10, 4)
  options     Json?       // For categorical factors, store possible values
  formula     String?     // For complex calculations
  isActive    Boolean     @default(true)
  sortOrder   Int         @default(0)
  
  // Relationships
  category    RiskCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  assessments RiskFactorAssessment[]
  
  // Metadata
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  @@unique([name, categoryId])
  @@map("risk_factors")
}

model RiskAssessment {
  id                String      @id @default(cuid())
  proposalId        String      @unique @map("proposal_id")
  totalRiskScore    Decimal     @db.Decimal(5, 2) @default(0)
  riskLevel         RiskLevel   @default(LOW)
  contingencyRate   Decimal     @db.Decimal(5, 2) @default(0)
  recommendations   Json?       // Store risk mitigation recommendations
  notes             String?
  
  // Relationships
  proposal          Proposal    @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  factorAssessments RiskFactorAssessment[]
  
  // Metadata
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  
  @@map("risk_assessments")
}

model RiskFactorAssessment {
  id                String      @id @default(cuid())
  riskAssessmentId  String      @map("risk_assessment_id")
  riskFactorId      String      @map("risk_factor_id")
  inputValue        Decimal?    @db.Decimal(10, 4)
  textValue         String?
  calculatedScore   Decimal     @db.Decimal(5, 2)
  weightedScore     Decimal     @db.Decimal(5, 2)
  notes             String?
  
  // Relationships
  riskAssessment    RiskAssessment @relation(fields: [riskAssessmentId], references: [id], onDelete: Cascade)
  riskFactor        RiskFactor     @relation(fields: [riskFactorId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  
  @@unique([riskAssessmentId, riskFactorId])
  @@map("risk_factor_assessments")
}

// Market Analysis Models
model MarketData {
  id          String      @id @default(cuid())
  dataType    MarketDataType
  region      String?
  value       Decimal     @db.Decimal(10, 4)
  unit        String?
  effectiveDate DateTime  @map("effective_date")
  source      String?
  notes       String?
  
  // Metadata
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  @@map("market_data")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum ProposalStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELLED
}

enum ProjectType {
  COMMERCIAL
  RESIDENTIAL
  INDUSTRIAL
  INSTITUTIONAL
  RETAIL
  HOSPITALITY
  HEALTHCARE
  EDUCATIONAL
  OTHER
}

enum ItemCategory {
  GLASS
  FRAMING
  HARDWARE
  SEALANT
  ACCESSORIES
  LABOR
  EQUIPMENT
  MATERIALS
  OTHER
}

enum ScoringType {
  LINEAR
  EXPONENTIAL
  THRESHOLD
  CATEGORICAL
  FORMULA
}

enum DataType {
  NUMERIC
  PERCENTAGE
  CURRENCY
  CATEGORICAL
  BOOLEAN
  DATE
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MarketDataType {
  MATERIAL_PRICE
  LABOR_RATE
  ECONOMIC_INDICATOR
  REGIONAL_MULTIPLIER
  SEASONAL_FACTOR
}
